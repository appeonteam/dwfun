$PBExportHeader$m_t.srm
forward
global type m_t from menu
end type
type m_testcontent from menu within m_t
end type
type m_1sharedata from menu within m_testcontent
end type
type m_2datawindow from menu within m_testcontent
end type
type m_3test from menu within m_testcontent
end type
type m_er from menu within m_testcontent
end type
type m_5createsingleobject from menu within m_testcontent
end type
type m_6propertyfunction from menu within m_testcontent
end type
type m_testcontent from menu within m_t
m_1sharedata m_1sharedata
m_2datawindow m_2datawindow
m_3test m_3test
m_er m_er
m_5createsingleobject m_5createsingleobject
m_6propertyfunction m_6propertyfunction
end type
type m_closeall from menu within m_t
end type
global type m_t from menu
m_testcontent m_testcontent
m_closeall m_closeall
end type
end forward

global type m_t from menu
m_testcontent m_testcontent
m_closeall m_closeall
end type
global m_t m_t

type variables
datastore ²âÊÔ
end variables

on m_t.create
m_t=this
call super::create
this.m_testcontent=create m_testcontent
this.m_closeall=create m_closeall
this.Item[UpperBound(this.Item)+1]=this.m_testcontent
this.Item[UpperBound(this.Item)+1]=this.m_closeall
end on

on m_t.destroy
call super::destroy
destroy(this.m_testcontent)
destroy(this.m_closeall)
end on

type m_testcontent from menu within m_t
m_1sharedata m_1sharedata
m_2datawindow m_2datawindow
m_3test m_3test
m_er m_er
m_5createsingleobject m_5createsingleobject
m_6propertyfunction m_6propertyfunction
end type

on m_testcontent.create
call super::create
this.text = "Test Content"
this.m_1sharedata=create m_1sharedata
this.m_2datawindow=create m_2datawindow
this.m_3test=create m_3test
this.m_er=create m_er
this.m_5createsingleobject=create m_5createsingleobject
this.m_6propertyfunction=create m_6propertyfunction
this.Item[UpperBound(this.Item)+1]=this.m_1sharedata
this.Item[UpperBound(this.Item)+1]=this.m_2datawindow
this.Item[UpperBound(this.Item)+1]=this.m_3test
this.Item[UpperBound(this.Item)+1]=this.m_er
this.Item[UpperBound(this.Item)+1]=this.m_5createsingleobject
this.Item[UpperBound(this.Item)+1]=this.m_6propertyfunction
end on

on m_testcontent.destroy
call super::destroy
destroy(this.m_1sharedata)
destroy(this.m_2datawindow)
destroy(this.m_3test)
destroy(this.m_er)
destroy(this.m_5createsingleobject)
destroy(this.m_6propertyfunction)
end on

type m_1sharedata from menu within m_testcontent
end type

on m_1sharedata.create
call super::create
this.text = "1. ShareData"
end on

on m_1sharedata.destroy
call super::destroy
end on

event clicked;OpenSheet(w_ShareData,w_mdi,1,Layered!)
end event

type m_2datawindow from menu within m_testcontent
end type

on m_2datawindow.create
call super::create
this.text = "2. DataWindow"
end on

on m_2datawindow.destroy
call super::destroy
end on

event clicked;OpenSheet(w_grid,w_mdi,1,Layered!)
end event

type m_3test from menu within m_testcontent
end type

event clicked;opensheet(w_createdw, parentwindow, 1, Layered!)
end event

on m_3test.create
call super::create
this.text = "3. Function Create"
end on

on m_3test.destroy
call super::destroy
end on

type m_er from menu within m_testcontent
end type

event clicked;opensheet(w_syntaxfromsql, parentwindow, 1, Layered!)
end event

on m_er.create
call super::create
this.text = "4. Function SyntaxFromSql"
end on

on m_er.destroy
call super::destroy
end on

type m_5createsingleobject from menu within m_testcontent
end type

event clicked;opensheet(w_createsingleobject, parentwindow, 1, Layered!)
end event

on m_5createsingleobject.create
call super::create
this.text = "5. Create Single Object"
end on

on m_5createsingleobject.destroy
call super::destroy
end on

type m_6propertyfunction from menu within m_testcontent
end type

on m_6propertyfunction.create
call super::create
this.text = "6. Property  Function"
end on

on m_6propertyfunction.destroy
call super::destroy
end on

event clicked;opensheet(w_property_event, parentwindow, 1, Layered!)
end event

type m_closeall from menu within m_t
end type

on m_closeall.create
call super::create
this.text = "Close all"
end on

on m_closeall.destroy
call super::destroy
end on

event clicked;Halt;
end event

